# app/dispatcher.py

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

from modules import (
    horoscopes, moon_cycles, news, jokes, exercises,
    psychology, esoterica, recipes, fashion,
    investment_news, investment_abc, audio_affirmations
)

from app.utils import send_typing_action

def setup_handlers(app):

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–≥–æ—Ä–æ—Å–∫–æ–ø", send_horoscope))
    app.add_handler(CommandHandler("–º—É–¥—Ä–æ—Å—Ç—å", send_psychology))
    app.add_handler(CommandHandler("–±–ª—é–¥–æ", send_recipe))
    app.add_handler(CommandHandler("–∞–Ω–µ–∫–¥–æ—Ç", send_joke))
    app.add_handler(CommandHandler("–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è", send_investment_abc))
    app.add_handler(CommandHandler("–Ω–æ–≤–æ—Å—Ç—å", send_news))
    app.add_handler(CommandHandler("–∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è", send_affirmation))
    app.add_handler(CommandHandler("–ª—É–Ω–∞", send_moon))

    # Callback –∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(handle_button))

@send_typing_action
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø", callback_data="–≥–æ—Ä–æ—Å–∫–æ–ø"),
         InlineKeyboardButton("üåô –õ—É–Ω–∞", callback_data="–ª—É–Ω–∞")],
        [InlineKeyboardButton("üç≤ –†–µ—Ü–µ–ø—Ç", callback_data="—Ä–µ—Ü–µ–ø—Ç"),
         InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="–Ω–æ–≤–æ—Å—Ç—å")],
        [InlineKeyboardButton("üí∏ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è", callback_data="–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è"),
         InlineKeyboardButton("üßò –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è")],
        [InlineKeyboardButton("üéß –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è", callback_data="–∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è"),
         InlineKeyboardButton("üòÇ –ê–Ω–µ–∫–¥–æ—Ç", callback_data="–∞–Ω–µ–∫–¥–æ—Ç")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –±–æ—Ç. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å üíñ", reply_markup=reply_markup)

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    await query.answer()

    handlers = {
        "–≥–æ—Ä–æ—Å–∫–æ–ø": send_horoscope,
        "–ª—É–Ω–∞": send_moon,
        "—Ä–µ—Ü–µ–ø—Ç": send_recipe,
        "–Ω–æ–≤–æ—Å—Ç—å": send_news,
        "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è": send_psychology,
        "–∞–Ω–µ–∫–¥–æ—Ç": send_joke,
        "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è": send_investment_abc,
        "–∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è": send_affirmation
    }

    if data in handlers:
        await handlers[data](update, context, from_button=True)

# –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
@send_typing_action
async def send_horoscope(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False):
    text = await horoscopes.get_today_horoscope()
    await reply(update, text)

@send_typing_action
async def send_moon(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False):
    text = await moon_cycles.get_today_moon_phase()
    await reply(update, text)

@send_typing_action
async def send_recipe(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False):
    text = await recipes.get_recipe()
    await reply(update, text)

@send_typing_action
async def send_news(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False):
    text = await news.get_news()
    await reply(update, text)

@send_typing_action
async def send_psychology(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False):
    text = await psychology.get_tip()
    await reply(update, text)

@send_typing_action
async def send_joke(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False):
    text = await jokes.get_joke()
    await reply(update, text)

@send_typing_action
async def send_investment_abc(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False):
    text = await investment_abc.get_tip()
    await reply(update, text)

@send_typing_action
async def send_affirmation(update: Update, context: ContextTypes.DEFAULT_TYPE, from_button=False):
    audio = await audio_affirmations.get_affirmation()
    await reply_audio(update, audio)

async def reply(update: Update, text: str):
    if update.message:
        await update.message.reply_text(text, reply_markup=back_buttons())
    elif update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=back_buttons())

async def reply_audio(update: Update, audio: str):
    if update.message:
        await update.message.reply_audio(audio=audio, reply_markup=back_buttons())
    elif update.callback_query:
        await update.callback_query.message.reply_audio(audio=audio, reply_markup=back_buttons())

def back_buttons():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start"),
         InlineKeyboardButton("üîÅ –î—Ä—É–≥–æ–µ", callback_data="–ø–æ–≤—Ç–æ—Ä–∏—Ç—å")]
    ])
