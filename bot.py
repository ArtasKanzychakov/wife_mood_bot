import os
import logging
from dotenv import load_dotenv

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputFile
)
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, CallbackQueryHandler
)

from app.scheduler import setup_scheduler, set_target_chat
from modules import (
    horoscopes, moon_cycles, jokes, psychology,
    esoterica, recipes, exercises, news,
    investment_news, investment_abc, audio_affirmations,
    fashion
)

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
PORT = int(os.getenv("PORT", "8443"))
HEROKU_APP_NAME = os.getenv("HEROKU_APP_NAME", "")
WEBHOOK_URL = f"https://{HEROKU_APP_NAME}.herokuapp.com/{TOKEN}" if HEROKU_APP_NAME else None

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üåü –ì–æ—Ä–æ—Å–∫–æ–ø", callback_data="horoscope")],
        [InlineKeyboardButton("üòÇ –ê–Ω–µ–∫–¥–æ—Ç", callback_data="joke"),
         InlineKeyboardButton("üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", callback_data="psychology")],
        [InlineKeyboardButton("üîÆ –≠–∑–æ—Ç–µ—Ä–∏–∫–∞", callback_data="esoterica"),
         InlineKeyboardButton("üçΩ –ë–ª—é–¥–æ –¥–Ω—è", callback_data="recipe")],
        [InlineKeyboardButton("üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data="investments")],
        [InlineKeyboardButton("üßò‚Äç‚ôÄÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="exercise")],
        [InlineKeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="news"),
         InlineKeyboardButton("üëó –ú–æ–¥–∞", callback_data="fashion")],
        [InlineKeyboardButton("üéß –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è", callback_data="affirmation")],
    ]
    return InlineKeyboardMarkup(keyboard)

def back_button_keyboard():
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    return InlineKeyboardMarkup(keyboard)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    set_target_chat(chat_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π. –í—ã–±–∏—Ä–∞–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ:",
        reply_markup=main_menu_keyboard()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "back":
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∫–ª—é—á—É
    if data == "horoscope":
        text = await horoscopes.get_today_horoscope()
        await query.edit_message_text(text=text, reply_markup=back_button_keyboard())

    elif data == "joke":
        text = await jokes.get_joke()
        await query.edit_message_text(text=text, reply_markup=back_button_keyboard())

    elif data == "psychology":
        text = await psychology.get_tip()
        await query.edit_message_text(text=text, reply_markup=back_button_keyboard())

    elif data == "esoterica":
        text = await esoterica.get_tip()
        await query.edit_message_text(text=text, reply_markup=back_button_keyboard())

    elif data == "recipe":
        text = await recipes.get_recipe()
        await query.edit_message_text(text=text, reply_markup=back_button_keyboard())

    elif data == "investments":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º", callback_data="invest_news")],
            [InlineKeyboardButton("–ê–∑–±—É–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", callback_data="invest_abc")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard)

    elif data == "invest_news":
        text = await investment_news.get_news()
        await query.edit_message_text(text=text, reply_markup=back_button_keyboard())

    elif data == "invest_abc":
        text = await investment_abc.get_tip()
        await query.edit_message_text(text=text, reply_markup=back_button_keyboard())

    elif data == "exercise":
        morning_ex = await exercises.get_morning_exercise()
        evening_ex = await exercises.get_evening_exercise()
        text = f"üßò‚Äç‚ôÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n{morning_ex}\n\nüåô –í–µ—á–µ—Ä–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n{evening_ex}"
        await query.edit_message_text(text=text, reply_markup=back_button_keyboard())

    elif data == "news":
        text = await news.get_news()
        await query.edit_message_text(text=text, reply_markup=back_button_keyboard())

    elif data == "fashion":
        text = await fashion.get_tip()
        await query.edit_message_text(text=text, reply_markup=back_button_keyboard())

    elif data == "affirmation":
        audio_url = await audio_affirmations.get_affirmation()
        await query.message.reply_audio(audio=audio_url)
        await query.edit_message_text(text="üéß –í–æ—Ç —Ç–≤–æ—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è!", reply_markup=back_button_keyboard())

# --- –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä) ---

async def pinned_message(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    text = (
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
        "–ö–∞–∂–¥—ã–π —á–∞—Å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ.\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å—é–¥–∞."
    )
    await context.bot.send_message(chat_id, text=text, reply_markup=main_menu_keyboard())

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    setup_scheduler(app)  # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

    if WEBHOOK_URL:
        # –ó–∞–ø—É—Å–∫ —Å webhook (Render, Heroku)
        await app.bot.set_webhook(WEBHOOK_URL)
        await app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=WEBHOOK_URL
        )
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ polling
        await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
