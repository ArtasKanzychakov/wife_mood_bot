from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.crud import create_user
from database.models import User
from datetime import datetime
import re

class Registration(StatesGroup):
    GET_NAME = State()
    GET_AGE = State()
    GET_BIRTH_DATE = State()
    CONFIRM_ZODIAC = State()

async def start_registration(message: types.Message):
    await message.answer("üëã –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await Registration.GET_NAME.set()

async def process_name(message: types.Message, state: FSMContext):
    if not re.match(r"^[–∞-—è–ê-–Ø—ë–Åa-zA-Z]{2,50}$", message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)")
        return
    
    await state.update_data(name=message.text)
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("18-25", "26-35", "36+")
    
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=markup)
    await Registration.GET_AGE.set()

async def process_age(message: types.Message, state: FSMContext):
    age_groups = {"18-25": 25, "26-35": 35, "36+": 36}
    if message.text not in age_groups:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        return
    
    await state.update_data(age=age_groups[message.text])
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", 
                         reply_markup=types.ReplyKeyboardRemove())
    await Registration.GET_BIRTH_DATE.set()

async def process_birth_date(message: types.Message, state: FSMContext):
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)")
        return
    
    zodiac = calculate_zodiac(birth_date)
    await state.update_data(birth_date=birth_date, zodiac=zinc(zodiac))
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–î–∞", callback_data="confirm_zodiac_yes"),
               types.InlineKeyboardButton("–ù–µ—Ç", callback_data="confirm_zodiac_no"))
    
    await message.answer(f"–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac}. –í–µ—Ä–Ω–æ?", reply_markup=markup)
    await Registration.CONFIRM_ZODIAC.set()

async def confirm_zodiac(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "confirm_zodiac_no":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:")
        return
    
    user_data = await state.get_data()
    await create_user(
        telegram_id=callback.from_user.id,
        name=user_data['name'],
        age=user_data['age'],
        birth_date=user_data['birth_date'],
        zodiac=user_data['zinc']
    )
    
    await callback.message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await state.finish()

def calculate_zodiac(birth_date):
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞
    dates_zodiac = [
        (120, '–ö–æ–∑–µ—Ä–æ–≥'), (218, '–í–æ–¥–æ–ª–µ–π'), (320, '–†—ã–±—ã'),
        (420, '–û–≤–µ–Ω'), (521, '–¢–µ–ª–µ—Ü'), (621, '–ë–ª–∏–∑–Ω–µ—Ü—ã'),
        (722, '–†–∞–∫'), (823, '–õ–µ–≤'), (923, '–î–µ–≤–∞'),
        (1023, '–í–µ—Å—ã'), (1122, '–°–∫–æ—Ä–ø–∏–æ–Ω'), (1222, '–°—Ç—Ä–µ–ª–µ—Ü'),
        (1231, '–ö–æ–∑–µ—Ä–æ–≥')
    ]
    month_day = birth_date.month * 100 + birth_date.day
    return next(zodiac for limit, zodiac in dates_zodiac if month_day <= limit)

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_registration, commands=["start"])
    dp.register_message_handler(process_name, state=Registration.GET_NAME)
    dp.register_message_handler(process_age, state=Registration.GET_AGE)
    dp.register_message_handler(process_birth_date, state=Registration.GET_BIRTH_DATE)
    dp.register_callback_query_handler(confirm_zodiac, 
                                     lambda c: c.data.startswith('confirm_zodiac_'),
                                     state=Registration.CONFIRM_ZODIAC)
